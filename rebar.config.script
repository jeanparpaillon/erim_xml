% -*- mode: erlang -*-

Env = [],

CreateExpatVars = fun (Prefix) ->
			  {{d, 'HAVE_EXPAT', true}, 
			   ["erim_xml_expat.so", "erim_xml_expat_legacy.so"],
			   [
			    {"EXPAT_CFLAGS", "-I" ++ filename:join([Prefix, "include"])},
			    {"EXPAT_LDFLAGS", "-L" ++ filename:join([Prefix, "libs"]) ++ " -lexpat"}
			   ]
			  }
		  end,

CreateXml2Vars = fun (Prefix) ->
			 {{d, 'HAVE_LIBXML2', true}, 
			  ["erim_xml_libxml2.so"],
			  [
			   {"XML2_CFLAGS", "-I" ++ filename:join([Prefix, "include"])},
			   {"XML2_LDFLAGS", "-L" ++ filename:join([Prefix, "lib"]) ++ " -lxml2"}
			  ]
			 }
		 end,

AddToConfig = fun (Section, Opt, C) ->
		      Opts = proplists:get_value(Section, C, []),
		      lists:keystore(Section, 1, C, {Section, [Opt | Opts]})
	      end,

Parsers = [],
P2 =
case filelib:is_file("/usr/local/include/expat.h") of
    true -> [CreateExpatVars("/usr/local") | Parsers];
    false ->
	case filelib:is_file("/usr/include/expat.h") of
	    true -> [CreateExpatVars("/usr") | Parsers];
	    false -> Parsers
	end
end,

P3 = case string:strip(os:cmd("pkg-config --variable=prefix libxml-2.0"), both, $\n) of
	       [$/ | _] = P -> [CreateXml2Vars(P) | P2];
	       _ -> P2
	   end,

case P3 of
    [] ->
	throw("E: At least one XML parser backend is required (expat or libxml2) !");
    _ ->
	lists:foldl(fun ({Opts, Targets, ParserEnv}, Acc) ->
			    Acc2 = AddToConfig(erl_opts, Opts, Acc),
			    Hook = "make -C priv "
				++ string:join(Targets, " ") ++ " "
				++ string:join([ K ++ "=\"" ++ V ++ "\"" || {K,V} <- Env ++ ParserEnv], " "),
			    AddToConfig(pre_hooks, Hook, Acc2)
		    end, CONFIG, P3)
end.
